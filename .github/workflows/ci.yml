name: CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: volcanion_auth_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        cat > .env.test << EOF
        NODE_ENV=test
        PORT=3000
        DB_HOST=localhost
        DB_PORT=3306
        DB_USER=root
        DB_PASSWORD=test_password
        DB_NAME=volcanion_auth_test
        REDIS_HOST=localhost
        REDIS_PORT=6379
        REDIS_PASSWORD=
        JWT_ACCESS_SECRET=test_jwt_access_secret_key_for_testing_only
        JWT_REFRESH_SECRET=test_jwt_refresh_secret_key_for_testing_only
        JWT_ACCESS_EXPIRES_IN=15m
        JWT_REFRESH_EXPIRES_IN=7d
        EMAIL_HOST=smtp.ethereal.email
        EMAIL_PORT=587
        EMAIL_USER=test@ethereal.email
        EMAIL_PASSWORD=test_password
        EMAIL_FROM=noreply@volcanion-auth.com
        APP_NAME=Volcanion Auth Test
        CLIENT_URL=http://localhost:3000
        EOF

    - name: Wait for MySQL to be ready
      run: |
        until mysqladmin ping -h localhost -P 3306 -u root -ptest_password --silent; do
          echo 'Waiting for MySQL...'
          sleep 2
        done

    - name: Setup test database
      run: |
        mysql -h localhost -P 3306 -u root -ptest_password -e "CREATE DATABASE IF NOT EXISTS volcanion_auth_test;"
        NODE_ENV=test npm run setup:db

    - name: Run lint
      run: npm run lint

    - name: Run type check
      run: npm run type-check

    - name: Run tests
      run: npm run test:coverage
      env:
        NODE_ENV: test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v5
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit --audit-level moderate

    - name: Run dependency check
      run: |
        npx better-npm-audit audit --level moderate

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: volcanion-auth:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
